<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>#Conditions on Metricly Docs</title>
    <link>https://metriclyhelpsite.netlify.com/tags/conditions/</link>
    <description>Recent content in #Conditions on Metricly Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://metriclyhelpsite.netlify.com/tags/conditions/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create Conditions</title>
      <link>https://metriclyhelpsite.netlify.com/alerts-notifications/policies/create-conditions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://metriclyhelpsite.netlify.com/alerts-notifications/policies/create-conditions/</guid>
      <description>When you are creating conditions, the Policy Editor counts the number of metrics that apply to the conditions you have set. To view those metrics, click on the link. This link opens the list of matching metrics in a new tab.
Create a Metric Condition  Navigate to Alerts &amp;gt; New Policy &amp;gt; Conditions &amp;gt; Add Condition &amp;gt; Add Metric Condition.  To edit an existing policy, Navigate to Alerts &amp;gt; Show All Policies &amp;gt; Click Policy Name &amp;gt; Edit Policy &amp;gt; Conditions &amp;gt; Add Metric Conditions.</description>
    </item>
    
    <item>
      <title>Create External Event Conditions</title>
      <link>https://metriclyhelpsite.netlify.com/alerts-notifications/policies/create-external-event-conditions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://metriclyhelpsite.netlify.com/alerts-notifications/policies/create-external-event-conditions/</guid>
      <description>External Event conditions for policies are typically used in conjunction with Webhook integrations. See the Webhook integration setup or Webhook API documentation for more information.
 Open Policy Editor. Click Conditions. Click Add Condition, then select Add External Event Condition.  Type into the fields to create a proper filter:  Message Contains: A regex statement that attempts to match a word or phrase in the event message. Title Contains: A regex statement that attempts to match a word or phrase in the eventâ€™s title.</description>
    </item>
    
    <item>
      <title>Policies</title>
      <link>https://metriclyhelpsite.netlify.com/alerts-notifications/policies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://metriclyhelpsite.netlify.com/alerts-notifications/policies/</guid>
      <description>A policy is a set of conditional tests used to set custom rules for when Metricly will generate an event or other notifications. In other words, policies allow you to define various types of abnormal element behavior, then notify you when that abnormal behavior occurs.
Use the Policy Editor to add, edit, enable, disable, or delete policies.
A policy is made up of a scope, condition(s), duration, and notification(s).
 The Scope defines the element or elements to which a policy is applied.</description>
    </item>
    
    <item>
      <title>Regex Guide</title>
      <link>https://metriclyhelpsite.netlify.com/alerts-notifications/policies/regex-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://metriclyhelpsite.netlify.com/alerts-notifications/policies/regex-guide/</guid>
      <description>Use Regex to Match Metric Conditions Regex uses all metrics that contain your input value. Typing aws.elb.httpcode.* would match both aws.elb.httpcode_backend_2xx, as well as netuitive.aws.elb.httpcodebackenderrorpercent.
 Exclude computed metrics using a ^ before the start of a metric name. Use Metric Tags to select a tag to further filter your condition.  We recommend testing any regular expressions that you create at https://regexr.com.
Match String Match the start and end of the string contained between ^ and $.</description>
    </item>
    
  </channel>
</rss>