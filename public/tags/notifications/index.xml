<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notifications on Metricly Docs</title>
    <link>https://cranky-lalande-9d501c.netlify.com/tags/notifications/</link>
    <description>Recent content in Notifications on Metricly Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://cranky-lalande-9d501c.netlify.com/tags/notifications/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS ASG Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/aws-policies-asg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/aws-policies-asg/</guid>
      <description>Policy names are prefixed with AWS ASG –
    Policy name Duration Condition 1 (and) Condition 2 (and) Condition 3 Cat. Description     Elevated CPUActivity (Normal Network Activity) 30 min aws.ec2.cpuutilization has an upper baseline + upper contextual deviation metricly.aws.ec2.bytesinperse does not have a upper baseline + upper contextual deviation metricly.aws.ec2.bytesoutpersec does not have a upper baseline + upper contextual deviation. INFO This policy is designed to catch cases where CPU activity is higher than than normal and cannot be explained by a corresponding increase in network traffic.</description>
    </item>
    
    <item>
      <title>AWS DynamoDB Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/aws-policies-dynamodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/aws-policies-dynamodb/</guid>
      <description>Policy names are prefixed with AWS DynamoDB –
    Policy Name Duration Condition 1 Cat. Description     Elevated Read Capacity Utilization 30 Min metricly.aws.dynamodb.readcapacityutilization has an upper baseline deviation + an upper contextual deviation + a static threshold ≥ 50. WARNING Read Capacity Utilization has been higher than expected for over 30 minutes; also, the actual value has been above 50% for that time.   Elevated Write Capacity Utilization 30 Min metricly.</description>
    </item>
    
    <item>
      <title>AWS EBS Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/aws-policies-ebs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/aws-policies-ebs/</guid>
      <description>Before reading about the EBS default policy, it is important to understand the following Metricly computed metrics.
 Average Latency: Average Latency is straightforward as it represents the average amount of time that it takes for a disk operation to complete. Queue Length Differential: Queue Length Differential measures the difference between the actual disk queue length and the “ideal” disk queue length.The ideal queue length is based on Amazon’s rule of thumb that for every 200 IOPS you should have a queue length of 1.</description>
    </item>
    
    <item>
      <title>AWS EC2 Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/aws-policies-ec2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/aws-policies-ec2/</guid>
      <description>Policy names are prefixed with AWS EC2 –
    Policy name Duration Condition 1 (and) Condition 2 (and) Condition 3 Cat. Description     Elevated CPUActivity (Normal Network Activity) 30 min aws.ec2.cpuutilization has an upper baseline deviation + an upper contextual deviation metricly.aws.ec2.bytesinpersec does not have a upper baseline deviation + does not have a upper contextual deviation metricly.aws.ec2.bytesoutpersec does not have a upper baseline deviation + does not have a upper contextual deviationn INFO Increases in CPU activity are not uncommon when there is a rise in network activity.</description>
    </item>
    
    <item>
      <title>AWS EFS Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/aws-policies-efs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/aws-policies-efs/</guid>
      <description>Policy names are prefixed with AWS EFS –
    Policy name Duration Condition 1 (and) Condition 2 (and) Condition 3 Cat. Description     AWS EFS – Depleted Burst Credit Balance 15 minutes aws.efs.burstcreditbalance = 0   Critical There are no burst credits left. The number of burst credits that a file system has is zero.   AWS EFS – IO Percentage Critical 15 minutes aws.</description>
    </item>
    
    <item>
      <title>AWS ELB Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/aws-policies-elb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/aws-policies-elb/</guid>
      <description>Policy names are prefixed with AWS ELB –
    Policy name Duration Condition 1 (and) Condition 2 Category Description     Elevated BackendError Rate (Low Volume) 15 min metricly.aws.elb.httpcodebackenderrorpercent has an upper baseline deviation + an upper contextual deviation metricly.aws.elb.requestcount has a static threshold &amp;lt;1,000 WARNING This is the first of three policies that look at elevated backend error rates. This policy looks specifically at low traffic volume cases.</description>
    </item>
    
    <item>
      <title>AWS Elasticache Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/aws-policies-elasticache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/aws-policies-elasticache/</guid>
      <description>Policy names are prefixed with AWS Elasticache –
    Policy name Duration Condition 1 (and) Condition 2 Category Description     Memcached – CPU Threshold Exceeded 5 min aws.elasticache.cpuutilization has a static threshold &amp;gt;90%  CRITICAL The Memcached Node has exceeded the CPU threshold of 90%. The cache cluster may need to be scaled, either by using a larger node type or by adding more nodes.</description>
    </item>
    
    <item>
      <title>AWS Lambda Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/aws-policies-lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/aws-policies-lambda/</guid>
      <description>Policy names are prefixed with AWS Lambda –
    Policy name Duration Conditions Category Description     Elevated Invocation Count 30 min aws.lambda.invocations has an upper baseline deviation + an upper contextual deviation WARNING The number of calls to the function (invocations) have been greater than expected for at least the last 30 minutes.   Depressed Invocation Count 10 min aws.lambda.invocations has a lower baseline deviation + a lower contextual deviation WARNING The number of calls to the function (invocations) have been lower than expected for at least the last 10 minutes.</description>
    </item>
    
    <item>
      <title>AWS RDS Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/aws-policies-rds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/aws-policies-rds/</guid>
      <description>Policy names are prefixed with AWS RDS –
    Policy name Duration Condition 1 (and) Condition 2 (and) Condition 3 Cat. Description     Elevated RDS CPU Activity (Normal Network Activity) 30 min metricly.aws.rds.cpuutilization has an upper baseline deviation + an upper contextual deviation + a static threshold &amp;gt; 20 metricly.aws.rds.networkreceivethroughput does not have an upper baseline deviation + does not have a upper contextual deviation metricly.</description>
    </item>
    
    <item>
      <title>AWS SNS Notifications</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/notifications-aws-sns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/notifications-aws-sns/</guid>
      <description>You can leverage AWS’s Simple Notification Service as one of your notification methods in Metricly. There are two ways to accomplish this: through an IAM Role or Access Key. It is recommended that you have first set up the AWS Integration and are familiar with terms such as ARN (Amazon Resource Names), which are needed to complete setup.
Inbound &amp;amp; Outbound This guide tackles outbound SNS setup, however you can also ingest inbound SNS notifications.</description>
    </item>
    
    <item>
      <title>AWS SQS Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/aws-policies-sqs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/aws-policies-sqs/</guid>
      <description>Policy names are prefixed with AWS SQS –
    Policy name Duration Conditions Category Description     AWS SQS – Queue Falling Behind 2 hours metricly.aws.sqs.arrivalrate has a metric threshold &amp;gt; metricly.aws.sqs.completionrate CRITICAL The arrival rate for the queue has been greater than the completion rate for at least 2 hours. This is an indication that processing of the queue is falling behind.    </description>
    </item>
    
    <item>
      <title>Alert on a Check</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/checks/checks-alerting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/checks/checks-alerting/</guid>
      <description>Setting up an alert in Metricly requires the creation of a policy and the system checks are no exception. Any check coming into the system can have a corresponding alert as well as a notification.
 Click on policies and select New Policy. Name the policy and apply any scoping or filtering required (for example, narrowing the scope to WinServ in US-West region with Tag Environment:Production). Next click Conditions &amp;gt; Add Condition, and from the drop down you will see Add System Check Condition.</description>
    </item>
    
    <item>
      <title>Alerts &amp; Notifications</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/</guid>
      <description>New to Metricly? Use this page as an overview for the features related to Alerts, Events, Policies, and Notifications. For a more technical walkthrough on each, see our related articles.
Alerts Alerts are a continuous series of events. They group anomalous behavior and enable you to view open (active) or closed (inactive) incidents. The Open Policies list is the first you see when navigating to the Alerts menu. This list is updated every 30 seconds.</description>
    </item>
    
    <item>
      <title>Alerts Page</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/alerts-page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/alerts-page/</guid>
      <description>The Alerts page shows a list of all your configured policies, both enabled and disabled. It includes:
 Policy name Number of elements in scope Filters on the policy State of the policy (Enabled/Disabled) Current status (OK, Info, Warning, Critical).  This page has additional filters to display all Open and Closed policies.
 Filtering by Open will display only the policies that are currently (Now) violating a set condition(s).</description>
    </item>
    
    <item>
      <title>Apache HTTPD Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/apache-policies-httpd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/apache-policies-httpd/</guid>
      <description>Linux Apache HTTPD – Depressed Traffic Volume 30 min httpd..ReqPerSec has a lower baseline deviation WARNING The number of requests per second has been lower than expected for at least the past 30 minutes.     Linux Apache HTTPD – Elevated Traffic Volume 30 min httpd..ReqPerSec has an upper baseline deviation WARNING The number of requests per second has been higher than expected for at least the past 30 minutes.</description>
    </item>
    
    <item>
      <title>Azure Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/microsoft-azure-policies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/microsoft-azure-policies/</guid>
      <description>Policy names are prefixed with Azure VM –
    Policy name Metrics Required Duration Condition 1 (and) Condition 2 (and) Condition 3 Cat. Description     CPU Threshold Exceeded Boot Diagnostics 15 min Processor.PercentProcessorTime has a static threshold &amp;gt; 50%   WARNING The CPU on the Azure Virtual Machine has exceeded 95% for at least 15 minutes.   Elevated CPU Activity (Normal Network Activity) Boot Diagnostics 30 min Processor.</description>
    </item>
    
    <item>
      <title>Cassandra Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/cassandra-policies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/cassandra-policies/</guid>
      <description>Policy name Duration Conditions Category Description     Depressed Key Cache Hit Rate 30 min cassandra.Cache.KeyCache.HitRate has an lower baseline deviation + a static threshold ≤ 0.85 WARNING The hit rate for the key cache is lower than expected and is less than 85%. This condition has been persisting for at least the past 30 minutes.   Elevated Node Read Latency 30 min cassandra.Keyspace.ReadLatency.OneMinuteRate has an upper baseline deviation WARNING The overall keyspace read latency on this Cassandra node has been higher than expected for at least 30 minutes.</description>
    </item>
    
    <item>
      <title>Checks</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/checks/</guid>
      <description>Checks are used to determine the state or health of infrastructure resources, services, or applications.
Dynamic and customizable, Checks allow you to define a time duration and then notify you when that state change occurs. Checks can be completely custom built by you or leverage our OOTB checks.
Prerequisites You must have already installed and configured a Windows and/or Linux agent to set up checks.
We recommend you update your agents to their latest version before using this document.</description>
    </item>
    
    <item>
      <title>Choose Duration</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/choose-duration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/choose-duration/</guid>
      <description>Duration is the consecutive length of time for which all the conditions in a policy must be met before an event or other optional notification is created. The default setting for metric condition duration is 5 minutes; the default (and only) setting for external event condition duration is real-time. Because Metricly aggregates data on five-minute cycles, the duration for metric conditions must be at least 5 minutes.
By setting the duration of ExamplePolicy X to 10 minutes, an event will not be created in Metricly until all the conditions in ExamplePolicy X have been met for the same period of 10 consecutive minutes.</description>
    </item>
    
    <item>
      <title>Choose Scope</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/choose-scope/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/choose-scope/</guid>
      <description>The scope of a policy defines which element(s) get assigned to that policy. A policy can use a combination of criterion to narrow its selection; for example, all elements tagged with region-east + EC2 as a type.
Scope Methods When using multiple fields, an element must meet each criterion to be included in the policy’s scope.
Name Contains or Name Excludes  Input a string of characters into the Name Contains or Name Excludes field.</description>
    </item>
    
    <item>
      <title>CloudWatch Events</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/events/cloudwatch-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/events/cloudwatch-events/</guid>
      <description>Through a combination of SNS Notifications, Metricly’s Webhook integration, and an external event conditions policy filter, you can push event logs from your AWS services to Metricly and act on them in the UI. This works across several AWS services. Once set up, these logs can be divided further on the policy level (through matching value strings in the log message and categorized by severity). Policies for your event logs can also be set up with various notifications through email, slack, and others.</description>
    </item>
    
    <item>
      <title>Collectd Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/collectd-policies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/collectd-policies/</guid>
      <description>Policy name Duration Conditions Category Description     Elevated Memory Usage (Collectd) 30 min metricly.collectd.memory.utilizationpercent has an upper baseline deviation INFO Indicates an increase in memory usage above what is considered to be normal.   Elevated Process Count 30 min metricly.collectd.processes.total has an upper baseline deviation INFO Indicates that the total number of processes has increased above what is considered to be normal.   Elevated Percentage of Blocked Processes 30 min metricly.</description>
    </item>
    
    <item>
      <title>Create Conditions</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/create-conditions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/create-conditions/</guid>
      <description>When you are creating conditions, the Policy Editor counts the number of metrics that apply to the conditions you have set. To view those metrics, click on the link. This link opens the list of matching metrics in a new tab.
Create a Metric Condition  Navigate to Alerts &amp;gt; New Policy &amp;gt; Conditions &amp;gt; Add Condition &amp;gt; Add Metric Condition.  To edit an existing policy, Navigate to Alerts &amp;gt; Show All Policies &amp;gt; Click Policy Name &amp;gt; Edit Policy &amp;gt; Conditions &amp;gt; Add Metric Conditions.</description>
    </item>
    
    <item>
      <title>Create External Event Conditions</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/create-external-event-conditions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/create-external-event-conditions/</guid>
      <description>External Event conditions for policies are typically used in conjunction with Webhook integrations. See the Webhook integration setup or Webhook API documentation for more information.
 Open Policy Editor. Click Conditions. Click Add Condition, then select Add External Event Condition.  Type into the fields to create a proper filter:  Message Contains: A regex statement that attempts to match a word or phrase in the event message. Title Contains: A regex statement that attempts to match a word or phrase in the event’s title.</description>
    </item>
    
    <item>
      <title>Create or Edit a Policy</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/create-edit-policies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/create-edit-policies/</guid>
      <description>Create, edit, delete, enable, and disable policies with the Policy Editor. You can also use Policy Editor to enable and disable notifications.
 Open the Policy Editor. Navigate to Alerts &amp;gt; + Add New Policy. Begin crafting your policy at Step 1: Scope. You can also open an existing policy and click Edit Policy. Policies that correspond to inactive datasources cannot be edited.  The top of your policy has 3 important fields:</description>
    </item>
    
    <item>
      <title>Custom Checks</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/checks/custom-checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/checks/custom-checks/</guid>
      <description>Our platform is flexible to support any custom checks, but you will need a mechanism to schedule the scripts to run. Linux cron jobs or Window task scheduler will typically work for most cases. If you are running on the Linux platform our agent can also schedule the running of your scripts via the Users Scripts Integration. This option will allow you to schedule a script that may post to our REST API as output either a system check, or a time-series metric value, or even a text-based data.</description>
    </item>
    
    <item>
      <title>Customize Notification Payloads</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/customize-notification-payloads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/customize-notification-payloads/</guid>
      <description>Custom JSON payloads in Metricly support FreeMarker writeup. This page contains a list of examples for you to reference when creating your own notification payloads for emails, SNS, and webhooks.
JSON Variables Available in Metricly    Variable Description     ${event.data.results} The description of the event as a policy violation.   ${event.id} The ID of the event   ${eventCategory.name} The event category ( (Info), (Warning), or (Critical)).</description>
    </item>
    
    <item>
      <title>Delete a Policy</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/delete-policy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/delete-policy/</guid>
      <description> On the Alerts page, select the desired policy. In Policy Editor, click Delete.  </description>
    </item>
    
    <item>
      <title>Diamond (Linux) Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/diamond-linux-policies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/diamond-linux-policies/</guid>
      <description>Before reading about these default policies, note that both the Elevated User CPU and Elevated System CPU policies assume that the CPU Collector is configured to collect aggregate CPU metrics, rather than per core metrics.
It also assumes that the metrics are being normalized. This is done by setting the percore setting set to FALSE (it is TRUE by default) and the normalize setting set to TRUE (it is FALSE by default) in your configuration file.</description>
    </item>
    
    <item>
      <title>Docker Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/docker-policies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/docker-policies/</guid>
      <description>Policy name Duration Conditions Category Description     Docker Container – CPU Throttling 15 min metricly.docker.cpu.container_throttling_percent has a static threshold &amp;gt;0 WARNING The Docker container has had its CPU usage throttled for at least the past 15 minutes.   Docker Container – Elevated CPU Utilization 30 min metricly.docker.cpu.container_cpu_percent has an upper baseline deviation + an upper contextual deviation INFO CPU usage on the Docker container has been higher than expected for 30 minutes or longer.</description>
    </item>
    
    <item>
      <title>Elasticsearch Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/elastic-search-policies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/elastic-search-policies/</guid>
      <description>Policy name Duration Conditions Category Description     Cluster Health Degraded to Red 15 min elasticsearch.cluster_health.status has a static threshold &amp;lt; 1 CRITICAL The cluster health status is red which means that one or more primary shard(s) and its replica(s) is missing.   Cluster Health Degraded to Yellow 15 min elasticsearch.cluster_health.status is between 1 and 1.8 WARNING The cluster health status is yellow which means that one or more shard replica(s) is missing.</description>
    </item>
    
    <item>
      <title>Email Notifications</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/notifications-emails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/notifications-emails/</guid>
      <description>You can create email templates with custom messaging that are re-usable across multiple policies, or simply choose Metricly’s default email notifications. Read below for configuration steps.
Configuration  Click your Username &amp;gt; Notifications. Click Add Notification. Select Email for Notification Type. The following modal appears:  Choose your frequency via the Re-notify every field. Check Notify on clear if you want to be notified when the alert has ended. Click New Email to create a new email template.</description>
    </item>
    
    <item>
      <title>Email Payloads</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/customize-notification-payloads/freemarker-email-payloads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/customize-notification-payloads/freemarker-email-payloads/</guid>
      <description>There are two event payload types that can be leveraged with email notification payloads: event and event_cleared. An event is generated when a policy is violating. An event_cleared is generated when a once-violating policy is no longer violating. Your custom event payloads can be setup to notify you on either type with unique messaging and details about the event.
To create a custom event payload:
 Navigate to your Account &amp;gt; Notifications &amp;gt; Email.</description>
    </item>
    
    <item>
      <title>Enable or Disable a Policy</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/enable-disable-policy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/enable-disable-policy/</guid>
      <description> On the Alerts page, select the desired policy. In Policy Editor, select or deselect the Enable Policy checkbox.  You can also enable or disable policies directly from the List and Card Policy view options.
 </description>
    </item>
    
    <item>
      <title>Events</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/events/</guid>
      <description>Events indicate that a policy has been violated, meaning all of the policy conditions have been met for the set duration. In other words, events indicate that Metricly has detected anomalous behavior in one or more of the elements in your environment.
For example, if you create a policy for all EC2 elements with the condition CPU Utilization greater than 90% and a duration of 10 minutes, an event will be generated when an EC2 element’s CPU Utilization metric exceeds 90% for 10 consecutive minutes.</description>
    </item>
    
    <item>
      <title>HipChat Notifications</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/notifications-hipchat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/notifications-hipchat/</guid>
      <description>Send a notification to a HipChat room when an event occurs on your Metricly Policies. HipChat notifications are re-usable across multiple policies. Read below for configuration steps.
Configuration 1. Generate a room token  Log in to your Hipchat account. Navigate to the Rooms section. Under My Rooms, select or create the desired room. On the left panel, select Tokens. Type a Label for the room and select Send Notification from the scopes list.</description>
    </item>
    
    <item>
      <title>Java Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/java-policies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/java-policies/</guid>
      <description>Policy name Duration Conditions Category Description     Elevated JVM CPU Activity 15 min cpu.used.percent has an upper baseline deviation + an upper contextual deviation + a static threshold &amp;gt; 50% WARNING This policy will generate a WARNING event when the JVM’s CPU activity is higher than expected. Additionally, the CPU usage is above 50%.   Elevated JVM Heap Usage 15 min metricly.jvm.heap.utilizationpercent has an upper baseline deviation + an upper contextual deviation WARNING This policy will generate a WARNING event when the JVM’s heap usage is higher than expected.</description>
    </item>
    
    <item>
      <title>Kafka Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/kafka-policies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/kafka-policies/</guid>
      <description>Policy names are prefixed with Kakfa –
    Policy name Duration Condition 1 (and) Condition 2 Category Description     Depressed Number of Zookeeper Connections 30 min kafka.zookeeper.zk_num_alive_connections has a lower baseline deviation  WARNING The number of active connections to Zookeeper has been lower than expected for at least the past 30 minutes.   Elevated Consumer Lag 15 min kafka.zookeeper.consumer_groups.*.comsuler_lag has an upper baseline deviation  WARNING Consumer lag has been higher than expected for at least 15 minutes.</description>
    </item>
    
    <item>
      <title>Linux Checks</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/checks/linux-checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/checks/linux-checks/</guid>
      <description>Enable Linux Checks Currently, Metricly comes with three pre-built checks; Heartbeat, Processes, and Ports. These are turnkey checks that do not require any scripting or coding, just simple configuration setting in the respective configuration files.
 Make sure the Linux agent is installed. Metricly checks can be enabled via the configuration files included with the agent. All checks configuration files for the Linux agent can be found in /opt/netuitive-agent/conf/collectors Some of the checks are enabled by default, while you would need to enable other checks.</description>
    </item>
    
    <item>
      <title>Microsoft Teams Notifications</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/notifications-microsoft-teams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/notifications-microsoft-teams/</guid>
      <description>Configuration 1. Add an Incoming Webhook in Microsoft Teams  Login to your Microsoft Teams account. Navigate to Store and search for Incoming Webhook.  Choose a Microsoft Team that will receive Metricly notifications. Click Install. Select a channel from your Microsoft team and click Set up.  Provide a name for your Webhook. You may also upload a photo at this point. Click Create. Copy the Webhook URL that is generated.</description>
    </item>
    
    <item>
      <title>MongoDB Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/mongodb-policies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/mongodb-policies/</guid>
      <description>Policy names are prefixed with MongoDB –
    Policy name Duration Condition 1 (and) Condition 2 Category Description     Connections in Use Threshold Exceeded 5 min metricly.linux.mongo.connections.utilization percent has a static threshold &amp;gt; 90%  CRITICAL More than 90% of the total connections to MongoDB are in use. You may need to scale your servers to handle the load.   Elevated Number of Queued Read Requests 30 min mongo.</description>
    </item>
    
    <item>
      <title>Mute Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/mute-policies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/mute-policies/</guid>
      <description>This silences all attached notifications for the policies selected for a set duration. You can manually unmute a policy at any time as well.
 Select all policies you wish to mute. Click Mute Notifications. Input a mute duration and click OK. Your selected policies will remain muted until your chosen duration expires or when you manually unmute them.  </description>
    </item>
    
    <item>
      <title>Notifications</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/</guid>
      <description>Notifications are optional alerts sent to another source (e.g., email, PagerDuty, OpsGenie) when an event occurs. You will only receive notifications from policies that have a notification(s) configured. While notifications are enabled by default, they will be automatically disabled if they are used in a policy and fail for a period of time.
Using Notifications The Policy Editor Set up notifications by opening the desired policy in Policy Editor. To enable or disable existing notifications, see below.</description>
    </item>
    
    <item>
      <title>OpsGenie Notifications</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/notifications-opsgenie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/notifications-opsgenie/</guid>
      <description>Configuration 1. Create a Metricly integration within OpsGenie  Log in to your OpsGenie account. Under Integrations, select Metricly. Copy the API key provided on this page to your clipboard. You will use this to set up a new OpsGenie notification in Metricly. Leave the Teams and Recipients fields as {{teams}} and {{recipients}}, respectively. This ensures that the Teams and Recipients you include in Part 2 are passed from Metricly to your OpsGenie account, and will receive alerts.</description>
    </item>
    
    <item>
      <title>PagerDuty Notifications</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/notifications-pageryduty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/notifications-pageryduty/</guid>
      <description>Configuration 1. Create a service in PagerDuty  Log into your PagerDuty account. Navigate to Configuration &amp;gt; Services. Click Add New Services.  Type a name for the service and select your incident settings. For Integration Type, click the Select a Tool dropdown &amp;gt; Netuitive. Finish all other settings and click Add Service. Copy the Integration Key provided. This is needed to set up a new PagerDuty notification in Metricly.</description>
    </item>
    
    <item>
      <title>Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/</guid>
      <description>A policy is a set of conditional tests used to set custom rules for when Metricly will generate an event or other notifications. In other words, policies allow you to define various types of abnormal element behavior, then notify you when that abnormal behavior occurs.
Use the Policy Editor to add, edit, enable, disable, or delete policies.
A policy is made up of a scope, condition(s), duration, and notification(s).
 The Scope defines the element or elements to which a policy is applied.</description>
    </item>
    
    <item>
      <title>RabbitMQ Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/rabbitmq-policies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/rabbitmq-policies/</guid>
      <description>Policy names are prefixed with RabbitMQ –
    Policy name Duration Conditions Category Description     Depressed Message Count 30 min rabbitmq.queue_totals.messages has a lower baseline deviation WARNING The number of messages across all queues has been lower than expected for at least the past 30 minutes.   Elevated Memory Usage 30 min rabbitmq.health.mem_used has an upper baseline deviation WARNING Memory usage has been higher than expected for at least the past 30 minutes.</description>
    </item>
    
    <item>
      <title>Regex Guide</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/regex-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/regex-guide/</guid>
      <description>Use Regex to Match Metric Conditions Regex uses all metrics that contain your input value. Typing aws.elb.httpcode.* would match both aws.elb.httpcode_backend_2xx, as well as netuitive.aws.elb.httpcodebackenderrorpercent.
 Exclude computed metrics using a ^ before the start of a metric name. Use Metric Tags to select a tag to further filter your condition.  We recommend testing any regular expressions that you create at https://regexr.com.
 Match String Match the start and end of the string contained between ^ and $.</description>
    </item>
    
    <item>
      <title>SNS Payloads</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/customize-notification-payloads/freemarker-sns-payloads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/customize-notification-payloads/freemarker-sns-payloads/</guid>
      <description> SNS Payloads You must have AWS SNS setup in your console to use this payload type. The below payload returns the event category when active; once the event has cleared it returns CLEAR.
{ &amp;quot;timestamp&amp;quot;: &amp;quot;${eventTimestamp}&amp;quot;, &amp;quot;category&amp;quot;: &amp;quot;&amp;lt;#if payloadType == &#39;event_cleared&#39;&amp;gt;CLEAR&amp;lt;#else&amp;gt;${eventCategory.name}&amp;lt;/#if&amp;gt;&amp;quot;, &amp;quot;element&amp;quot;: &amp;quot;${elementFqn}&amp;quot;, &amp;quot;policy&amp;quot;: &amp;quot;${policyName}&amp;quot; }  </description>
    </item>
    
    <item>
      <title>Slack Notifications</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/notifications-slack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/notifications-slack/</guid>
      <description>Configuration 1. Install Incoming Webhooks on Slack If you’ve already installed the Incoming Webhooks app, you can skip to step 2.
  Go to Slack’s app directory. Search for Incoming Webhooks. It should dynamically update a drop-down beneath the search bar. Click Incoming Webhooks.  Click Add Configuration.  Select a channel from Choose a Channel… or create a new one.  Click Add Incoming WebHooks Integration.  2.</description>
    </item>
    
    <item>
      <title>Stride Notifications</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/notifications-stride/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/notifications-stride/</guid>
      <description>Setting up alert notifications from Metricly to Stride just requires a few quick steps. Once complete, your alerts are forwarded to the designated chat room within Stride.
Configuration  Log in to Stride. Select a room where alerts should be delivered or create a new one.  Click Apps &amp;gt; Add Custom App.  Click API tokens and input Metricly Alerts in Specify a token name. Click Create. In the popup window, copy the access token and conversation URL.</description>
    </item>
    
    <item>
      <title>Top Violators</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/top-violators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/top-violators/</guid>
      <description>Top Violators reports display the elements in your environment that have triggered the most events within the specified Time Frame setting, allowing you to quickly locate the elements with high event counts. This report provides the same type of data as the Event Explorer, but the data is grouped by element.
 Summary Table: This table provides both the number of events triggered by each element (Event Count), and the amount of time that each element triggered events within the specified Time Frame.</description>
    </item>
    
    <item>
      <title>VictorOps Notifications</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/notifications-victorops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/notifications-victorops/</guid>
      <description>Configuration 1. Copy REST API URL From VictorOps  Login to your VictorOps account. Navigate to Alert Behavior &amp;gt; Integrations.  Search for Metricly and select the card.  Click Enable Integration. Copy the Service API Endpoint. This is required for the next step.   2. Create a Webhook notification in Metricly  In Metricly, navigate to the Policy Editor. Click tab 3, Notifications. Click Add Notification and select Webhook as the Notification Type.</description>
    </item>
    
    <item>
      <title>View Checks</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/checks/view-checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/checks/view-checks/</guid>
      <description>Leveraging our saved filters is a good way to find your checks. All checks are tagged with the key n.checks and value check name.
 Click Type and select either SERVER (for Linux) or WINSRV (for Windows) to pick where the check has been configured. Navigate to More &amp;gt; Tag and search for n.checks.  </description>
    </item>
    
    <item>
      <title>View an Event</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/events/view-an-event/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/events/view-an-event/</guid>
      <description>The following tools allow you to view and analyze events in the Metricly UI:
 Event Explorer: Event Explorer displays a comprehensive list of all the events in your environment. You can filter the list by the event category, source (Metricly or External), element, element type, and/or tag of the element(s) to which an event is associated. You can also filter events within a specific time frame. For more information about Event Explorer, see below.</description>
    </item>
    
    <item>
      <title>Webhook Payloads</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/customize-notification-payloads/webhook-payloads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/customize-notification-payloads/webhook-payloads/</guid>
      <description>Webhook Payloads Webhooks have two main payload types: inbound and outbound. Outbound payloads can be customized and sent as notifications.
To create a customized webhook payload:
 Navigate to your Account Profile &amp;gt; Notifications &amp;gt; Webhook. Click + Add Webhook. Fill out all fields; select Custom from the Payload dropdown. Input your custom JSON + Freemarker writeup. Save.  Example 1
{ &amp;quot;message_type&amp;quot;:&amp;quot;&amp;lt;#if payloadType == &amp;quot;event&amp;quot;&amp;gt;${eventCategory.name}&amp;lt;/#if&amp;gt;&amp;lt;#if payloadType == &amp;quot;event_cleared&amp;quot;&amp;gt;RECOVERY&amp;lt;/#if&amp;gt;&amp;quot;, &amp;quot;entity_id&amp;quot;:&amp;quot;${elementId}&amp;quot;, &amp;quot;entity_display_name&amp;quot;:&amp;quot;${elementName}&amp;quot;, &amp;quot;state_message&amp;quot;:&amp;quot;&amp;lt;#if payloadType == &amp;quot;event&amp;quot;&amp;gt; [${elementName}] [${policyName}] [${eventTimestamp}] : ${policyDescription}&amp;lt;/#if&amp;gt;&amp;lt;#if payloadType == &amp;quot;event_cleared&amp;quot;&amp;gt;The policy ${policyName} has CLEARED for ${elementName} and is no longer generating events as of ${eventTimestamp}&amp;lt;/#if&amp;gt;&amp;quot; }  Example 2</description>
    </item>
    
    <item>
      <title>Webhooks Notifications</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/notifications-webhooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/notifications/notifications-webhooks/</guid>
      <description>There are two main uses for webhooks: pushing data into metricly (inbound) and pulling data like notifications out (outbound).
 Inbound: Achieved via POST URL that can be found on the Webhook integration card. Outbound: Used by several of our notification integrations and accessible through the Webhook GET API endpoint.  For a great example of an inbound webhook usecase, see how we pushed CloudWatch Logs into Metricly.
When using the outbound method, you can customize the JSON payload using the freemarker markup language from Account &amp;gt; Notifications &amp;gt; Webhook.</description>
    </item>
    
    <item>
      <title>Windows Checks</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/checks/windows-checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/checks/windows-checks/</guid>
      <description>Enable Windows Checks  Make sure the Windows agent is installed. Metricly checks can be enabled via the configuration files included with the agent. All checks configuration files for the Windows agent can be found in C:/Program Files (x86)/CollectdWin/conf/ or C:/Program Files/CollectdWin/conf/ (depending on the version of windows). Simply change the enable setting for the ReadSystemChecks from false to true in the CollectdWin.config file to enable the system checks. To configure the checks, edit the ReadSystemChecks.</description>
    </item>
    
    <item>
      <title>Windows Policies</title>
      <link>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/windows-policies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/alerts-notifications/policies/default-policies/windows-policies/</guid>
      <description>Policy names are prefixed with Windows –
    Policy name Duration Condition 1 (and) Condition 2 (and) Condition 3 Cat. Description     Elevated Disk Latency 15 min physical_disk._Total.avg_sec_per_read has an upper baseline deviation physical_disk._Total.avg_sec_per_write has an upper baseline deviation  WARNING This policy will generate a WARNING event when both disk read and write times are higher than their expected baselines   Elevated MemoryUtilization 10 min metricly.</description>
    </item>
    
  </channel>
</rss>