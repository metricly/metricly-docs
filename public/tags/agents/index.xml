<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Agents on Metricly Docs</title>
    <link>https://cranky-lalande-9d501c.netlify.com/tags/agents/</link>
    <description>Recent content in Agents on Metricly Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://cranky-lalande-9d501c.netlify.com/tags/agents/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>API Options</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/ruby-agent/ruby-agent-api-options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/ruby-agent/ruby-agent-api-options/</guid>
      <description>Log properties  logLocation: The absolute path of the log file. Leave this option blank to use the default location in the gem directory. logAge: Specify either the number of log files to keep or the frequency of rotation (daily, weekly, or monthly). logSize: Specify the maximum log file size (in bytes). debugLevel: Options include (in ascending order of severity) error, info, and debug.  Netuitived Connection Properties Netuitived address and port information.</description>
    </item>
    
    <item>
      <title>Agents</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CPU Metrics</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/diamond-agent/diamond-agent-metrics/diamond-agent-cpu-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/diamond-agent/diamond-agent-metrics/diamond-agent-cpu-metrics/</guid>
      <description>Collected    Fully Qualified Name(FQN) Description Statistic Units Min Max Sparse Data Strategy (SDS) BASE CORR UTIL     cpu.total.guest Percentage of CPU spent running virtual CPUs for guest operatingsystems. average percent 0 none none yes no no   cpu.total.guest_nice Percentage of CPU spent running low-priority virtual CPUs for guestoperating systems. average percent 0 none none yes no no   cpu.total.idle Percentage of CPU not doing any work.</description>
    </item>
    
    <item>
      <title>Collected Metrics</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/java-agent/java-metrics/java-agent-collected-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/java-agent/java-metrics/java-agent-collected-metrics/</guid>
      <description>Collected    Fully Qualified Name (FQN) Description Statistic Units Min Max Sparse Data Strategy (SDS) BASE CORR UTIL     *.calls The number of calls made to the method. sum count 0 none none yes no no   *.errors The number of method calls that resulted in errors. sum count 0 none none yes no no   *.time The amount of time spent executing the method totaled across all calls.</description>
    </item>
    
    <item>
      <title>Collectors</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/linux-collectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/linux-collectors/</guid>
      <description>There are three ways to configure the Linux Agent default collectors: via the BaseCollector, as a combination of individual collectors, or with just the SimpleCollector. This guide outlines their differences and how to use each; however, we encourage you to try the new SimpleCollector.
Using the Simple Collector netuitive-diamond/src/collectors/simple
Where the base or individual collectors include more data (which may be less useful or actionable), this SimpleCollector guarantees a cleaner streamlined experience.</description>
    </item>
    
    <item>
      <title>Collectors</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/collectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/collectors/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Common Commands</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/linux-common-commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/linux-common-commands/</guid>
      <description> These commands may vary depending on your distro. Linux Commands  service netuitive-agent {stop|start|restart}
 /etc/init.d/netuitive-agent {stop|start|restart}
 initctl {stop|start|restart} netuitive-agent
 systemctl {stop|start|restart} netuitive-agent
  </description>
    </item>
    
    <item>
      <title>Computed Metrics</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/java-agent/java-metrics/java-agent-computed-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/java-agent/java-metrics/java-agent-computed-metrics/</guid>
      <description>Computed    Fully Qualified Name (FQN) Description Statistic Units Min Max BASE CORR UTIL     netuitive.jvm.heap.utilizationpercent Percentage of the allocated heap memory that is currently in use.Computation:(Heap Used / Heap Committed) * 100 average percent 0 100 yes yes yes   netuitive.jvm.non-heap.utilizationpercent Percentage of the allocated non-heap memory that is currently in use.Computation:(Metaspace or PermGen Used + CodeCache Used / Metaspace or PermGen Committed + CodeCache Committed) * 100 average percent 0 100 yes yes yes   netuitive.</description>
    </item>
    
    <item>
      <title>Custom MBeans</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/java-agent/java-custom-mbeans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/java-agent/java-custom-mbeans/</guid>
      <description>The Java agent can collect metrics from custom mbeans. We have provided a sample spring boot application that creates 2 custom mbeans with test attributes here.
Multiple Custom MBean Diagram For a Single Custom MBean  Navigate to the zorka.properties file in your Java agent directory. Near the bottom of the file, set the attribute netuitive.api.custom.stats.mbean to the custom mbean you defined in your application  #custom mbean to collect metrics from netuitive.</description>
    </item>
    
    <item>
      <title>Diamond Agent</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/diamond-agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/diamond-agent/</guid>
      <description>Diamond’s default HTTP Post Handler can be used to send Diamond data to Metricly.
Configuration 1. Copy the unique API key from the Diamond integration in your account  In Metricly, navigate to Integrations. Click the Diamond card. Data collection should already be enabled, and a unique API key for your account has already been generated. Copy the API key.  2. Install &amp;amp; Configure Diamond  Download and install Diamond using the instructions found here.</description>
    </item>
    
    <item>
      <title>Disable</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/linux-disable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/linux-disable/</guid>
      <description>If you need to disable an existing Linux integration or view the unique API key assigned to your account:
 Navigate to User Profile &amp;gt; Integrations. Find the Integration with an Integration Type of Infrastructure. Click its name. Toggle Data Collection to disable it.  </description>
    </item>
    
    <item>
      <title>Disk Usage Metrics</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/diamond-agent/diamond-agent-metrics/diamond-agent-disk-usage-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/diamond-agent/diamond-agent-metrics/diamond-agent-disk-usage-metrics/</guid>
      <description> Computed    Fully Qualified Name(FQN) Description Units Min Max BASE CORR UTIL     metriclyicly.linux.iostat.totalreads Total reads across all disks. Computation: data.sum(‘iostat\..*\.reads)  0 none yes no no   metriclyicly.linux.iostat.totalwrites Total writes across all disks. Computation: data.sum(‘iostat\..*\.writes)  0 none yes no no    </description>
    </item>
    
    <item>
      <title>Diskspace Metrics</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/diamond-agent/diamond-agent-metrics/diamond-agent-diskspace-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/diamond-agent/diamond-agent-metrics/diamond-agent-diskspace-metrics/</guid>
      <description> Collected    Fully Qualified Name(FQN) Description Statistic Units Min Max Sparse Data Strategy (SDS) BASE CORR UTIL     diskspace..byte_percentfree Percentage of free bytes. average percent 0 100 none yes no no    Computed    Fully Qualified Name(FQN) Description Units Min Max BASE CORR UTIL     metriclyicly.linux.diskspace.*.byte_percentused Percentage of disk space used. Computation: 100 – diskspace.*.byte_percentfree percent 0 100 no no yes    </description>
    </item>
    
    <item>
      <title>Docker Install</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/linux-docker-install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/linux-docker-install/</guid>
      <description>1. Copy API Key From Docker Integration  From the Metricly top navigation menu, select Integrations.
 Click the Docker card.
 Ensure Data Collection is enabled. A unique API key for your account has already been generated.
 Highlight the one-line install command from the instructions and copy them. A unique API key for your account has already been generated and included in the command line.
  The command runs a container named netuitive-agent in the background and publishes the port values to the host.</description>
    </item>
    
    <item>
      <title>Elastic Beanstalk</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/linux-elastic-beanstalk-install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/linux-elastic-beanstalk-install/</guid>
      <description>Using an existing application file, you can deploy the Netuitive agent to a self-contained EC2 instance complete with a load balancer and everything else it needs to run. The Elastic Beanstalk instance can also scale by itself.
 Before creating your Elastic Beanstalk instance, find or create a folder called .ebextensions in your application’s directory. Copy the netuitive.config file to your .ebextensions folder. Replace the sample API key at the top of the netuitive.</description>
    </item>
    
    <item>
      <title>Element Tags</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/ruby-agent/ruby-agent-element-tags/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/ruby-agent/ruby-agent-element-tags/</guid>
      <description>Send Element tags To send element tags, update the agent.yml found in the netuitived gem by uncommenting the elementTags line. This file is located at netuitived/config/agent.yml.
Key/Value pairs should be added in the following format: name1:value1, name2:value2.</description>
    </item>
    
    <item>
      <title>Enable Proxy</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/java-agent/java-enable-proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/java-agent/java-enable-proxy/</guid>
      <description>Enable a Proxy  Navigate to the zorka.properties file. Find the proxy section:
  netuitive.api.proxy = no netuitive.api.proxy.address = http://&amp;lt;proxy host&amp;gt;:&amp;lt;proxy port&amp;gt;  3. Change the netuitive.api.proxy line to yes.
4. Add the correct proxy host and port to the netuitive.api.proxy.address line.</description>
    </item>
    
    <item>
      <title>Garbage Collection</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/ruby-agent/ruby-agent-garbage-collection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/ruby-agent/ruby-agent-garbage-collection/</guid>
      <description>The garbage collector attempts to return memory consumed by objects no longer in use by your application. Metricly can be used to collect metrics on how much time is spent in garbage collection for your Ruby applications. You should have Matz’s Ruby Interpreter (MRI) version 1.9.2 or greater or Ruby Enterprise Edition installed before enabling garbage collection metrics.
Configure  Navigate to your application’s initialization file. Add the following call (depending on your Ruby version) to the file:  For MRI v1.</description>
    </item>
    
    <item>
      <title>Interpret Exceptions</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/ruby-agent/ruby-agent-interpret-exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/ruby-agent/ruby-agent-interpret-exceptions/</guid>
      <description>IF sendErrorEvents is enabled in the netuitive_rails_agent config/agent.yaml file AND actionErrorsEnabled and/or sidekiqEnabled = true, exceptions are sent to Metricly as external events.
An Exception External event has the following tags to help you dissect the exception:
   Tag Description     Action The action the error originated from.   Controller The name of the controller that the exception came from.   Exception The type of exception.</description>
    </item>
    
    <item>
      <title>Java Agent</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/java-agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/java-agent/</guid>
      <description>Metricly’s Java agent is a java monitoring agent with a programmable bytecode instrumentation engine that’s enabled by adding a JVM integration in Metricly. The Metricly Java integration allows Metricly to collect JVM runtime system metrics like CPU, Memory, GC, Threads and Classes Count, and application components method performance statistics, such as number of calls and execution time.
Prerequisites Must have Java 6 Or greater.
Configuration 1. Copy API key  From the top navigation menu, select Integrations.</description>
    </item>
    
    <item>
      <title>Linux Agent</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/</guid>
      <description>Using the Linux Agent, you can quickly deploy and collect metrics with a rich set of metadata.
The agent discovers and collects KPI metrics, integrates with CloudWatch, and can leverage other agent metrics. Using various plugins, the Linux Agent can also pull metrics from many different products running on a Linux operating system (in addition to pulling metrics from the host Linux OS).</description>
    </item>
    
    <item>
      <title>Load Average Metrics</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/diamond-agent/diamond-agent-metrics/diamond-agent-load-average-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/diamond-agent/diamond-agent-metrics/diamond-agent-load-average-metrics/</guid>
      <description>Computed    Fully Qualified Name(FQN) Description Units Min Max BASE CORR UTIL     metriclyicly.linux.loadavg.01.normalized The is the average run queue size over the past minute, normalizedacross CPUs. Computation: attribute[‘cpus’] == null ? null : (data[‘loadavg.01’].actual /attribute[‘cpus’].value)  0 none yes no no   metriclyicly.linux.loadavg.05.normalized The is the average run queue size over the past 5 minutes, normalizedacross CPUs. Computation: attribute[‘cpus’] == null ? null : (data[‘loadavg.</description>
    </item>
    
    <item>
      <title>Manual Install</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/linux-elastic-manual-install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/linux-elastic-manual-install/</guid>
      <description> Via RPM rpm --import https://repos.app.netuitive.com/RPM-GPG-KEY-netuitive rpm -ivh https://repos.app.netuitive.com/rpm/noarch/netuitive-repo-1-0.2.noarch.rpm yum -y install netuitive-agent  Via DEB curl -s https://repos.app.netuitive.com/netuitive.gpg | apt-key add -apt-get install -y apt-transport-https echo &amp;quot;deb https://repos.app.netuitive.com/deb/ stable main&amp;quot; &amp;gt; /etc/apt/sources.list.d/netuitive.list apt-get -y update apt-get install -y netuitive-agent  </description>
    </item>
    
    <item>
      <title>Memory Metrics</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/diamond-agent/diamond-agent-metrics/diamond-agent-memory-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/diamond-agent/diamond-agent-metrics/diamond-agent-memory-metrics/</guid>
      <description> Computed    Fully Qualified Name(FQN) Description Units Min Max BASE CORR UTIL     metriclyicly.linux.memory.utilizationpercent Under Linux, memory buffered and cached are part of memory which can beconsidered available. See the following explanation . Computation: 100 – (memory.Buffers + memory.Cached + memory.MemFree) /memory.MemTotal * 100 percent 0 100 yes yes yes    </description>
    </item>
    
    <item>
      <title>Metrics</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/diamond-agent/diamond-agent-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/diamond-agent/diamond-agent-metrics/</guid>
      <description> All of the metrics for the Diamond Agent can be found in this folder.
Metrics Available  CPU Metrics   Disk Usage Metrics   Diskspace Metrics   Load Average Metrics   Memory Metrics   Network Metrics   </description>
    </item>
    
    <item>
      <title>Metrics</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/java-agent/java-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/java-agent/java-metrics/</guid>
      <description>Instrumenting Metric Values  First, set up the Java Agent. In the zorka/scripts/ directory, create a .bsh file for the application you want to monitor. Call zorka.require to load any extension scripts your application depends on. Define the function(s) you want Zorka to monitor using the template below. The template will establish namespace by creating a function that returns a reference to its own instance and then defines a variable that holds an instance of the function.</description>
    </item>
    
    <item>
      <title>Metrics</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/ruby-agent/ruby-agent-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/ruby-agent/ruby-agent-metrics/</guid>
      <description>Collected    Fully Qualified Name (FQN) Statistic Units Min Max Sparse Data Strategy (SDS)     action_controller.halted_callback sum count 0 none zero   action_controller.redirect sum count 0 none zero   action_controller.total_requests sum count 0 none zero   action_controller.*.total_requests sum count 0 none zero   action_controller...request.query_time average milliseconds 0 none zero   action_controller...request.total_duration average milliseconds 0 none zero   action_controller...request.view_time average milliseconds 0 none zero   action_controller.</description>
    </item>
    
    <item>
      <title>Network Metrics</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/diamond-agent/diamond-agent-metrics/diamond-agent-network-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/diamond-agent/diamond-agent-metrics/diamond-agent-network-metrics/</guid>
      <description>Computed    Fully Qualified Name(FQN) Description Units Min Max BASE CORR UTIL     metriclyicly.linux.network.*.errors The total number of errors, both transmit and receive. Computation: network..rx_errors + network..tx_errors errors 0 none yes no no   metriclyicly.linux.network.*.packets The total number of packets, both transmitted and received. Computation: network..rx_packets + network..tx_packets packets 0 none yes yes no   metriclyicly.linux.network.*.errors.percent The percentage of errors, both transmit and receive.</description>
    </item>
    
    <item>
      <title>Optional Config</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/linux-optional-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/linux-optional-config/</guid>
      <description>Changing Element Display Names You can change the display name of certain elements to help distinguish between each instance.
 Navigate to Integrations &amp;gt; Linux Integration. Click Advanced; a menu expands.  Click the Element Name field to edit it. Type the desired name into the field.  An element name of ${meta.originalName} would resolve to whatever name comes in with the original element payload before it would be replaced with the optional element name template.</description>
    </item>
    
    <item>
      <title>Optional Config</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/ruby-agent/ruby-agent-options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/ruby-agent/ruby-agent-options/</guid>
      <description>Log Options  logLocation: The absolute path of the log file. Leave this option blank to use the default location in the gem directory. logAge: Specify either the number of log files to keep or the frequency of rotation (daily, weekly, or monthly). logSize: Specify the maximum log file size (in bytes). debugLevel: Options include (in ascending order of severity) error, info, and debug.  Active Support Notifications The active support notifications are a pub-sub model that trigger active support notifications when certain actions are performed within your rails application(s).</description>
    </item>
    
    <item>
      <title>Remove</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/linux-remove/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/linux-remove/</guid>
      <description> Stop the Linux Agent (use the appropriate command for your distro). The most common being:  service netuitive-agent stop /etc/init.d/netuitive-agent stop initctl stop netuitive-agent systemctl stop netuitive-agent  Remove the directory containing the Linux Agent. Default: rm -r /opt/netuitive-agent.  If you don’t want to be prompted for each file that needs to be deleted, use rm -rf /opt/netuitive-agent   </description>
    </item>
    
    <item>
      <title>Ruby Agent</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/ruby-agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/ruby-agent/</guid>
      <description>The Ruby Agent comprises three Ruby gems&amp;ndash;netuitived, netuitive_ruby_api, and netuitive_rails_agent&amp;ndash;that work in tandem to monitor the performance of your Ruby applications.
 netuitived: allows metrics to be exported to the Metricly API. netuitive_ruby_api: allows for easy integration with netuitived. netuitive_rails_agent: provides default Ruby on Rails metrics and sends them to netuitived using netuitive_ruby_api.  The Ruby Agent can also be tuned to help application performance and used to read garbage collection metrics.</description>
    </item>
    
    <item>
      <title>Send Tags Via Zorka</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/java-agent/java-element-tags-zorka/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/java-agent/java-element-tags-zorka/</guid>
      <description>Send Element Tags via Zorka Agent  Navigate to the zorka.properties file in your Java agent directory. Near the bottom of the file, uncomment the #netuitive.api.tags list and add tags following the below format:   netuitive.api.tags = name:value, second:value  3. Save the file.</description>
    </item>
    
    <item>
      <title>Standard Install</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/linux-standard-install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/linux-standard-install/</guid>
      <description>This integration’s package (computed metrics, dashboards, and policies that will give you important events and alerts) will be automatically enabled and provisioned to your account as soon as Metricly receives data from the integration. The PACKAGES button on the integration setup page will become active once data is received, so you’ll be able to disable and re-enable the package at will.
1. Copy Install Command From Linux Integration Setup Page  From the top navigation menu, select Integrations.</description>
    </item>
    
    <item>
      <title>Troubleshooting</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/linux-troubleshooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/linux-troubleshooting/</guid>
      <description>Set Logs to Debugging Mode To set the Linux Agent logs to Debugging Mode, update the netuitive-agent.conf file.
 Navigate to the netuitive-agent.conf file. Update level = INFO to level = DEBUG. Save and restart your agent.  # to increase verbosity, set DEBUG level = DEBUG handlers = rotated_file propagate = 1  Need Help? 1. Save as Zip File Copy /opt/netuitive-agent/bin/get-support and paste it into your command line interface to zip up your agent configurations, logs, and system metadata.</description>
    </item>
    
    <item>
      <title>Uninstall Agent</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/java-agent/java-uninstall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/java-agent/java-uninstall/</guid>
      <description> How to Uninstall  Remove any JVM startup references to the Netuitive Java Agent.  java -javaagent:/opt/netuitive-zorka/netuitive.jar=/opt/netuitive-zorka -jar zorka-core-test.jar -- service   Delete all Netuitive Java Agent (netuitive-zorka-{version}) files.  If you instrumented metrics using the jvm.bsh script, you will need to remove the references to the script as well.
 </description>
    </item>
    
    <item>
      <title>Upgrade</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/linux-upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/linux-agent/linux-upgrade/</guid>
      <description>It’s important you upgrade to the latest version of the Linux Agent whenever possible, as we’re constantly improving it. Check out the recently closed issues and pull requests, as well as the release history, to see why you should upgrade.
 Stop the Linux Agent (use the appropriate command for your distro). The most common being:  service netuitive-agent stop /etc/init.d/netuitive-agent stop initctl stop netuitive-agent systemctl stop netuitive-agent  Run yum -y update netuitive-agent.</description>
    </item>
    
    <item>
      <title>Upgrade Java</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/java-agent/java-upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/java-agent/java-upgrade/</guid>
      <description> How to Upgrade  Download the latest Java agent here. Copy the new netuitive.jar file to your existing Java agent files to replace the old netuitive.jar file. Optionally, manually merge the new zorka.properties file with the old file to receive any new fields or settings.  </description>
    </item>
    
    <item>
      <title>Use Calculator App</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/java-agent/java-calculator-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/java-agent/java-calculator-app/</guid>
      <description>To to run the calculator app with the zorka agent, use the following command:
java -javaagent:/opt/netuitive-zorka-agent/netuitive.jar=/opt/netuitive-zorka-agent/ -jar /opt/zorka-core-test.jar  Calculator.java Source package com.netuitive.agent.test; public class Calculator { public Integer calculate(String operator, Integer first, Integer second) { if (operator.equals(“+”)) { return add(first, second); } else if (operator.equals(“-“)) { return minus(first, second); } else if (operator.equals(“*”)) { return multiply(first, second); } else if (operator.equals(“/”)) { return divide(first, second); } else { throw new IllegalArgumentException(“‘” + operator + “‘ is not supported, use one of [+|-|*|/] operators”); } } private Integer add(Integer first, Integer second) { return first + second; } private Integer minus(Integer first, Integer second) { return first – second; } private Integer multiply(Integer first, Integer second) { return first * second; } private Integer divide(Integer first, Integer second) { return first / second; } }  Example Below is an example file called calculator.</description>
    </item>
    
    <item>
      <title>Windows Agent</title>
      <link>https://cranky-lalande-9d501c.netlify.com/integrations/agents/windows-agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cranky-lalande-9d501c.netlify.com/integrations/agents/windows-agent/</guid>
      <description>The Metricly Windows Agent is a Microsoft Windows service that collects, aggregates, and publishes windows performance counters and attributes. Microsoft SQL Server, IIS, and .NET metrics are native to our Windows Agent. Only one Windows integration in your account is necessary to receive all Windows-related metrics.
Configure Installation is as easy as executing an MSI installer and configuring the service. The agent is pre-configured to send the most important performance metrics, windows events, and system attributes to Metricly.</description>
    </item>
    
  </channel>
</rss>